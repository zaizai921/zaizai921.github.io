<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>遍历Map集合的几种方式</title>
    <url>/2020/05/09/Base/001_%E9%81%8D%E5%8E%86map%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Java中遍历Map的几种常见方式"><a href="#Java中遍历Map的几种常见方式" class="headerlink" title="Java中遍历Map的几种常见方式"></a><span style="color:red">Java中遍历Map的几种常见方式</span></h1><h2 id="这里先定义个变量map"><a href="#这里先定义个变量map" class="headerlink" title="这里先定义个变量map"></a><span style="color:red">这里先定义个变量map</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            put(&quot;姓名&quot;,&quot;name&quot;);</span><br><span class="line">            put(&quot;年龄&quot;,&quot;age&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="第一种（通过遍历key去取value，效率较低）"><a href="#第一种（通过遍历key去取value，效率较低）" class="headerlink" title="第一种（通过遍历key去取value，效率较低）"></a><span style="color:red">第一种（通过遍历key去取value，效率较低）</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (Object o:map.keySet())&#123;</span><br><span class="line">            System.out.println(o+&quot;---&quot;+map.get(o));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二种（for-each循环中使用entries来遍历这是最常见的并且在大多数情况下也是最可取的遍历方式，取键值都可以。）"><a href="#第二种（for-each循环中使用entries来遍历这是最常见的并且在大多数情况下也是最可取的遍历方式，取键值都可以。）" class="headerlink" title="第二种（for-each循环中使用entries来遍历这是最常见的并且在大多数情况下也是最可取的遍历方式，取键值都可以。）"></a><span style="color:red">第二种（for-each循环中使用entries来遍历这是最常见的并且在大多数情况下也是最可取的遍历方式，取键值都可以。）</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">           System.out.println(&quot;key:&quot;+  entry.getKey() + &quot;\tvalue:&quot; + entry.getValue());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三种（遍历通过迭代器（Iterator）来进行遍历，代码比较冗余。）"><a href="#第三种（遍历通过迭代器（Iterator）来进行遍历，代码比较冗余。）" class="headerlink" title="第三种（遍历通过迭代器（Iterator）来进行遍历，代码比较冗余。）"></a><span style="color:red">第三种（遍历通过迭代器（Iterator）来进行遍历，代码比较冗余。）</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator &#x3D; map.entrySet().iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, String&gt; next &#x3D; iterator.next();</span><br><span class="line">            System.out.println(&quot;key:&quot;+next.getKey()+&quot;\tvalue:&quot;+next.getValue());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四种（直接遍历值，在foreach循环中遍历key或values。代码简洁，并且效率要好。）"><a href="#第四种（直接遍历值，在foreach循环中遍历key或values。代码简洁，并且效率要好。）" class="headerlink" title="第四种（直接遍历值，在foreach循环中遍历key或values。代码简洁，并且效率要好。）"></a><span style="color:red">第四种（直接遍历值，在foreach循环中遍历key或values。代码简洁，并且效率要好。）</span></h2><h3 id="下面代码通过KeySet获得key及value"><a href="#下面代码通过KeySet获得key及value" class="headerlink" title="下面代码通过KeySet获得key及value"></a>下面代码通过KeySet获得key及value</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (Object o:map.keySet())&#123;</span><br><span class="line">            System.out.println(&quot;key:&quot;+o+&quot;---value:&quot;+map.get(o));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="下面代码通过value获得value"><a href="#下面代码通过value获得value" class="headerlink" title="下面代码通过value获得value"></a>下面代码通过value获得value</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (Object o : map.values()) &#123;</span><br><span class="line">           System.out.println(&quot;value:&quot;+o);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第五种（java8遍历的写法，效率更高。）"><a href="#第五种（java8遍历的写法，效率更高。）" class="headerlink" title="第五种（java8遍历的写法，效率更高。）"></a><span style="color:red">第五种（java8遍历的写法，效率更高。）</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map.forEach((k,v)-&gt; System.out.println(&quot;key:&quot;+k+&quot;value:&quot;+v));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Base</category>
      </categories>
      <tags>
        <tag>Base</tag>
      </tags>
  </entry>
  <entry>
    <title>博客部署</title>
    <url>/2020/09/07/Blog/%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
      <tags>
        <tag>BLOG</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常用注解</title>
    <url>/2020/09/21/Java/001_%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Spring的常用注解"><a href="#Spring的常用注解" class="headerlink" title="Spring的常用注解"></a>Spring的常用注解</h1><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a><span style="color:red">@Component</span></h2><p>作用：</p>
<pre><code>调用无参构造创建一个bean对象，并把对象存入spring的IOC容器，交由spring容器进行管理。相当于在xml中配置一个bean。</code></pre>
<p>属性：</p>
<pre><code>value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。</code></pre>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a><span style="color:red">@Controller</span></h2><p>作用：</p>
<pre><code>作用上与@Component。一般用于表现层的注解。</code></pre>
<p>属性：</p>
<pre><code>value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。</code></pre>
<h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a><span style="color:red">@Service</span></h2><p>作用：</p>
<pre><code>作用上与@Component。一般用于业务层的注解。</code></pre>
<p>属性：</p>
<pre><code>value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。</code></pre>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a><span style="color:red">@Repository</span></h2><p>作用：</p>
<pre><code>作用上与@Component。一般用于持久层的注解。</code></pre>
<p>属性：</p>
<pre><code>value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。</code></pre>
<h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a><span style="color:red">@Bean</span></h2><p>作用：</p>
<pre><code>用于把当前方法的返回值作为bean对象存入spring的ioc容器中</code></pre>
<p>属性：</p>
<pre><code>name：用于指定bean的id。当不写时，默认值是当前方法的名称。注意：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象，查找的方式和Autowired注解的作用是一样的。</code></pre>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 获取DataSource对象</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Bean(value &#x3D; &quot;dataSource&quot;)</span><br><span class="line">public DataSource getDataSource() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ComboPooledDataSource dataSource &#x3D; new ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(this.driver);</span><br><span class="line">        dataSource.setJdbcUrl(this.url);</span><br><span class="line">        dataSource.setUser(this.username);</span><br><span class="line">        dataSource.setPassword(this.password);</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;catch (Exception exception) &#123;</span><br><span class="line">        throw new RuntimeException(exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><span style="color:red">@Autowired</span></h2><p>作用：</p>
<pre><code>@Autowire和@Resource都是Spring支持的注解形式动态装配bean的方式。Autowire默认按照类型(byType)装配，如果想要按照名称(byName)装配，需结合@Qualifier注解使用。</code></pre>
<p>属性：</p>
<pre><code>required：@Autowire注解默认情况下要求依赖对象必须存在。如果不存在，则在注入的时候会抛出异常。如果允许依赖对象为null，需设置required属性为false。</code></pre>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowire </span><br><span class="line">@Qualifier(&quot;userService&quot;) </span><br><span class="line">private UserService userService;</span><br></pre></td></tr></table></figure>
<h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a><span style="color:red">@Qualifier</span></h2><p>作用：</p>
<pre><code>在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。它在给字段注入时不能独立使用，必须和 @Autowire一起使用；但是给方法参数注入时，可以独立使用。</code></pre>
<p>属性：</p>
<pre><code>value：用于指定要注入的bean的id，其中，该属性可以省略不写。</code></pre>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowire</span><br><span class="line">@Qualifier(value&#x3D;&quot;userService&quot;) </span><br><span class="line">&#x2F;&#x2F;@Qualifier(&quot;userService&quot;)     &#x2F;&#x2F;value属性可以省略不写</span><br><span class="line">private UserService userService;</span><br></pre></td></tr></table></figure>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><span style="color:red">@Resource</span></h2><p>作用：</p>
<pre><code>@Autowire和@Resource都是Spring支持的注解形式动态装配bean的方式。@Resource默认按照名称(byName)装配，名称可以通过name属性指定。如果没有指定name，则注解在字段上时，默认取（name=字段名称）装配。如果注解在setter方法上时，默认取（name=属性名称）装配。</code></pre>
<p>属性：</p>
<pre><code>name：用于指定要注入的bean的id
type：用于指定要注入的bean的type</code></pre>
<p>装配顺序</p>
<pre><code>1.如果同时指定name和type属性，则找到唯一匹配的bean装配，未找到则抛异常；
2.如果指定name属性，则按照名称(byName)装配，未找到则抛异常；
3.如果指定type属性，则按照类型(byType)装配，未找到或者找到多个则抛异常；
4.既未指定name属性，又未指定type属性，则按照名称(byName)装配；如果未找到，则按照类型(byType)装配。</code></pre>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Resource(name&#x3D;&quot;userService&quot;)</span><br><span class="line">&#x2F;&#x2F;@Resource(type&#x3D;&quot;userService&quot;)</span><br><span class="line">&#x2F;&#x2F;@Resource(name&#x3D;&quot;userService&quot;, type&#x3D;&quot;UserService&quot;)</span><br><span class="line">private UserService userService;</span><br></pre></td></tr></table></figure>
<h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a><span style="color:red">@Value</span></h2><p>作用：</p>
<pre><code>通过@Value可以将外部的值动态注入到Bean中，可以为基本类型数据和String类型数据的变量注入数据</code></pre>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;基本类型数据和String类型数据的变量注入数据</span><br><span class="line">@Value(&quot;tom&quot;) </span><br><span class="line">private String name;</span><br><span class="line">@Value(&quot;18&quot;) </span><br><span class="line">private Integer age;</span><br></pre></td></tr></table></figure>


<h2 id="从properties配置文件中获取数据并设置到成员变量中"><a href="#从properties配置文件中获取数据并设置到成员变量中" class="headerlink" title="从properties配置文件中获取数据并设置到成员变量中"></a>从properties配置文件中获取数据并设置到成员变量中</h2><p>代码：</p>
<pre><code>// jdbcConfig.properties配置文件定义如下
jdbc.driver \= com.mysql.jdbc.Driver  
jdbc.url \= jdbc:mysql://localhost:3306/eesy  
jdbc.username \= root  
jdbc.password \= root

// 获取数据如下
@Value(&quot;$&#123;jdbc.driver&#125;&quot;)  
private String driver;

@Value(&quot;$&#123;jdbc.url&#125;&quot;)  
private String url;  

@Value(&quot;$&#123;jdbc.username&#125;&quot;)  
private String username;  

@Value(&quot;$&#123;jdbc.password&#125;&quot;)  
private String password;</code></pre>
<h2 id="改变bean作用范围的注解"><a href="#改变bean作用范围的注解" class="headerlink" title="改变bean作用范围的注解"></a>改变bean作用范围的注解</h2><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a><span style="color:red">@Scope</span></h2><p>作用：</p>
<pre><code>指定bean的作用范围。</code></pre>
<p>属性：</p>
<pre><code>value：
    1）singleton：单例
    2）prototype：多例
    3）request： 
    4）session： 
    5）globalsession：</code></pre>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowire</span><br><span class="line">@Scope(value&#x3D;&quot;prototype&quot;)</span><br><span class="line">private UserService userService;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>FeignClient的使用</title>
    <url>/2021/03/10/Java/002_feign%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="简单的FeignClient服务之间调用的注入Bean使用"><a href="#简单的FeignClient服务之间调用的注入Bean使用" class="headerlink" title="简单的FeignClient服务之间调用的注入Bean使用"></a>简单的FeignClient服务之间调用的注入Bean使用</h1><h2 id="Client方法"><a href="#Client方法" class="headerlink" title="Client方法"></a>Client方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@FeignClient(</span><br><span class="line">        name &#x3D; &quot;cmp-wh-device&quot;, &#x2F;&#x2F;服务提供方的服务名称</span><br><span class="line">        contextId &#x3D; &quot;zcDeviceClient&quot;, &#x2F;&#x2F;为每个Client手动指定不同的contextId 防止Bean冲突</span><br><span class="line">        configuration &#x3D; &#123;FeignConfig.class&#125;, &#x2F;&#x2F;Feign配置类，可以自定义Feign的Encoder、Decoder、LogLevel、Contract</span><br><span class="line">        fallbackFactory &#x3D; ZcDeviceClientFallBackFactory.class &#x2F;&#x2F;工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码</span><br><span class="line">)</span><br><span class="line">public interface IZcDeviceClient &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&#123;&quot;&#x2F;wh-device&#x2F;maintenance&#x2F;area&#x2F;list&quot;&#125;)</span><br><span class="line">    Result&lt;IPage&lt;MaintenanceArea&gt;&gt; queryPageList(@RequestParam MaintenanceArea entity, @RequestParam Integer pageNo, @RequestParam Integer pageSize, @RequestParam String minCreateTime, @RequestParam String maxCreateTime, @RequestParam HttpServletRequest req);</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;wh-device&#x2F;maintenance&#x2F;area&#x2F;queryByGuid&quot;)</span><br><span class="line">    Result&lt;MaintenanceArea&gt; queryByGuid(@RequestParam String guid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Hystrix的ClientFallBackFactory方法"><a href="#Hystrix的ClientFallBackFactory方法" class="headerlink" title="Hystrix的ClientFallBackFactory方法"></a>Hystrix的ClientFallBackFactory方法</h2><h6 id="当某个服务单元发生故障后-通过断路器的故障监控-类似熔断保险丝-向调用方法返回一个服务预期的-可处理的备选响应-而不是长时间的等待或者抛出调用方法无法处理的异常了-这样就可以保证了服务调用方的线程不会被长时间-不必要的占用-从而避免故障在分布式系统中的蔓延-乃至雪崩-代码如下"><a href="#当某个服务单元发生故障后-通过断路器的故障监控-类似熔断保险丝-向调用方法返回一个服务预期的-可处理的备选响应-而不是长时间的等待或者抛出调用方法无法处理的异常了-这样就可以保证了服务调用方的线程不会被长时间-不必要的占用-从而避免故障在分布式系统中的蔓延-乃至雪崩-代码如下" class="headerlink" title="当某个服务单元发生故障后,通过断路器的故障监控(类似熔断保险丝),向调用方法返回一个服务预期的,可处理的备选响应,而不是长时间的等待或者抛出调用方法无法处理的异常了.这样就可以保证了服务调用方的线程不会被长时间,不必要的占用,从而避免故障在分布式系统中的蔓延,乃至雪崩.代码如下"></a>当某个服务单元发生故障后,通过断路器的故障监控(类似熔断保险丝),向调用方法返回一个服务预期的,可处理的备选响应,而不是长时间的等待或者抛出调用方法无法处理的异常了.这样就可以保证了服务调用方的线程不会被长时间,不必要的占用,从而避免故障在分布式系统中的蔓延,乃至雪崩.代码如下</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component &#x2F;&#x2F;需要使用@Component注解，保证fallback类被Spring容器扫描到</span><br><span class="line">public class ZcDeviceClientFallBackFactory implements FallbackFactory&lt;IZcDeviceClient&gt; &#123;</span><br><span class="line">    private static final Logger log &#x3D; LoggerFactory.getLogger(ZcDeviceClientFallBackFactory.class);</span><br><span class="line"></span><br><span class="line">    public ZcDeviceClientFallBackFactory()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public IZcDeviceClient create(Throwable throwable) &#123;</span><br><span class="line">        return new IZcDeviceClient() &#123;</span><br><span class="line">            public Result&lt;IPage&lt;MaintenanceArea&gt;&gt; queryPageList(MaintenanceArea entity, Integer pageNo, Integer pageSize, String minCreateTime, String maxCreateTime, HttpServletRequest req)</span><br><span class="line">            &#123;</span><br><span class="line">                ZcDeviceClientFallBackFactory.log.error(&quot;查询发送错误&quot;,throwable);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Result&lt;MaintenanceArea&gt; queryByGuid(String guid) &#123;</span><br><span class="line">                ZcDeviceClientFallBackFactory.log.error(&quot;查询发送错误&quot;,throwable);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接下里就可以在实现类，控制层调用Client方法"><a href="#接下里就可以在实现类，控制层调用Client方法" class="headerlink" title="接下里就可以在实现类，控制层调用Client方法"></a>接下里就可以在实现类，控制层调用Client方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private IZcDeviceClient zcDeviceClient;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;todo 操作</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Feign</category>
      </categories>
      <tags>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>对list常用的几种操作</title>
    <url>/2021/05/08/Java/003_%E5%AF%B9list%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="1-对集合中每个对象根据具体属性进行排序"><a href="#1-对集合中每个对象根据具体属性进行排序" class="headerlink" title="1.对集合中每个对象根据具体属性进行排序"></a><span style="color:red">1.对集合中每个对象根据具体属性进行排序</span></h1><h2 id="根据学生的年龄进行降序"><a href="#根据学生的年龄进行降序" class="headerlink" title="根据学生的年龄进行降序"></a>根据学生的年龄进行降序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.sort(Comparator.comparing(Student::getAge).reversed());</span><br></pre></td></tr></table></figure>
<h2 id="根据学生年龄升序"><a href="#根据学生年龄升序" class="headerlink" title="根据学生年龄升序"></a>根据学生年龄升序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.sort(Comparator.comparing(Student::getAge));</span><br></pre></td></tr></table></figure>
<h1 id="2-过滤集合中的每个对象的属性是否符合判断依据"><a href="#2-过滤集合中的每个对象的属性是否符合判断依据" class="headerlink" title="2.过滤集合中的每个对象的属性是否符合判断依据"></a><span style="color:red">2.过滤集合中的每个对象的属性是否符合判断依据</span></h1><h2 id="下面的例子是过滤掉设备状态为3的"><a href="#下面的例子是过滤掉设备状态为3的" class="headerlink" title="下面的例子是过滤掉设备状态为3的"></a>下面的例子是过滤掉设备状态为3的</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.stream().filter(s -&gt; !s.getDeviceStatus().equals(&quot;3&quot;)).collect(Collectors.toList())</span><br></pre></td></tr></table></figure>
<h1 id="3-当集合中对象有多个属性-而我们只用其中一个属性时"><a href="#3-当集合中对象有多个属性-而我们只用其中一个属性时" class="headerlink" title="3.当集合中对象有多个属性 而我们只用其中一个属性时"></a><span style="color:red">3.当集合中对象有多个属性 而我们只用其中一个属性时</span></h1><h2 id="过滤掉其他属性-只拿出guid一个属性进行其他操作"><a href="#过滤掉其他属性-只拿出guid一个属性进行其他操作" class="headerlink" title="过滤掉其他属性  只拿出guid一个属性进行其他操作"></a>过滤掉其他属性  只拿出guid一个属性进行其他操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.stream().map(ZcFacilityMainSewageForzk::getGuid).collect(Collectors.toList())</span><br></pre></td></tr></table></figure>
<h1 id="4-集合中对象的属性有相同的值进行分组并操作"><a href="#4-集合中对象的属性有相同的值进行分组并操作" class="headerlink" title="4.集合中对象的属性有相同的值进行分组并操作"></a><span style="color:red">4.集合中对象的属性有相同的值进行分组并操作</span></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这里是对ZcStoreStockForzk库存对象中的spareCode属性值一样的进行分组groupingBy</span><br><span class="line">Map&lt;String, List&lt;ZcStoreStockForzk&gt;&gt; map &#x3D; zcStoreStockForzkService.list().stream().collect(Collectors.groupingBy(ZcStoreStockForzk::getSpareCode));</span><br><span class="line">		map.forEach((k, v) -&gt; &#123;</span><br><span class="line">			EchartsVO echartsVO &#x3D; new EchartsVO();</span><br><span class="line">			echartsVO.setName(v.get(0).getSpareName());</span><br><span class="line">			&#x2F;&#x2F;对编码一样的库存数量进行相加</span><br><span class="line">			echartsVO.setValue(v.stream().mapToInt(ZcStoreStockForzk::getStockAmount).sum());</span><br><span class="line">			list.add(echartsVO);</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle在项目中用到的语句</title>
    <url>/2020/05/09/Oracle/001_oracle%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="记录项目中Oracle常用的语句"><a href="#记录项目中Oracle常用的语句" class="headerlink" title="记录项目中Oracle常用的语句"></a>记录项目中Oracle常用的语句</h1><h2 id="拼接条件带时间"><a href="#拼接条件带时间" class="headerlink" title="拼接条件带时间"></a>拼接条件带时间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update ZC_STORE_STOCK SET CREATE_TIME &#x3D; to_date(&#39;2021-05-09 00:00:00&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;)</span><br></pre></td></tr></table></figure>
<h2 id="（项目中不知道谁一直输入错误的数据库密码-导致账户被锁，这个解锁user用户）"><a href="#（项目中不知道谁一直输入错误的数据库密码-导致账户被锁，这个解锁user用户）" class="headerlink" title="（项目中不知道谁一直输入错误的数据库密码 导致账户被锁，这个解锁user用户）"></a>（项目中不知道谁一直输入错误的数据库密码 导致账户被锁，这个解锁user用户）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user ecidi_wh account unlock;</span><br></pre></td></tr></table></figure>
<h2 id="求一个表中某个字段的总和-总和为空的话默认为0"><a href="#求一个表中某个字段的总和-总和为空的话默认为0" class="headerlink" title="求一个表中某个字段的总和(总和为空的话默认为0)"></a>求一个表中某个字段的总和(总和为空的话默认为0)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select COALESCE(SUM(PIPE_LENGTH),0) FROM &quot;ZC_FACILITY&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle设置自增长列</title>
    <url>/2021/08/10/Oracle/002_oracle%E8%AE%BE%E7%BD%AE%E5%88%97%E8%87%AA%E5%A2%9E%E9%95%BF/</url>
    <content><![CDATA[<h1 id="oracle给列设置自增长"><a href="#oracle给列设置自增长" class="headerlink" title="oracle给列设置自增长"></a>oracle给列设置自增长</h1><h2 id="首先创建序列"><a href="#首先创建序列" class="headerlink" title="首先创建序列"></a>首先创建序列</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create sequence zcstation_sort</span><br><span class="line">minvalue 1</span><br><span class="line">nomaxvalue </span><br><span class="line">increment by 1 </span><br><span class="line">start with 1</span><br><span class="line">nocache;</span><br></pre></td></tr></table></figure>
<h2 id="设置触发器"><a href="#设置触发器" class="headerlink" title="设置触发器"></a>设置触发器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace trigger demo6_tg_insertId</span><br><span class="line">before insert on zc_station for each row </span><br><span class="line">begin</span><br><span class="line">  select zcstation_sort.Nextval into:new.sort from dual;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<h2 id="一些别的命令"><a href="#一些别的命令" class="headerlink" title="一些别的命令"></a>一些别的命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查询所有序列</span><br><span class="line">select * from user_sequences</span><br><span class="line">&#x2F;&#x2F;删除序列（ZC_STATION_SEQ为序列名称）</span><br><span class="line">DROP SEQUENCE zcstation_sort;</span><br><span class="line">&#x2F;&#x2F;查询触发器（模糊查询）</span><br><span class="line">select trigger_name from all_triggers where trigger_name like &#39;%DEMO6%&#39;; </span><br><span class="line">&#x2F;&#x2F;根据trigger_name删除触发器</span><br><span class="line">DROP TRIGGER INSERT_ZC_STATION_ID_AUTOINC;</span><br><span class="line">DROP TRIGGER DEMO6_TG_INSERTID;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>上传图片</title>
    <url>/2020/09/21/Util/001_%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><h2 id="yml文件配置上传路径"><a href="#yml文件配置上传路径" class="headerlink" title="yml文件配置上传路径"></a>yml文件配置上传路径</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upload:</span><br><span class="line">  url: D:&#x2F;upload</span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取上传路径</span><br><span class="line">@Value(&quot;$&#123;upload.url&#125;&quot;)</span><br><span class="line">private String uploadUrl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;功能实现</span><br><span class="line">@PostMapping(&quot;&#x2F;weUploadFile&quot;)</span><br><span class="line">@ApiOperation(&quot;上传文件&quot;)</span><br><span class="line">public String upload(MultipartFile attach)&#123;&#x2F;&#x2F;attach要与前端传的name保持一致</span><br><span class="line">     &#x2F;&#x2F;获取真实路径</span><br><span class="line">     String realPath &#x3D; uploadUrl;</span><br><span class="line">     if(realPath!&#x3D;null)&#123;</span><br><span class="line">         File folder &#x3D; new File(realPath);</span><br><span class="line">         if (folder.exists()&#x3D;&#x3D;false)&#123;</span><br><span class="line">             folder.mkdirs();</span><br><span class="line">         &#125;</span><br><span class="line">         String original &#x3D; attach.getOriginalFilename();</span><br><span class="line">         &#x2F;&#x2F;下方代码对文件名重命名</span><br><span class="line">         &#x2F;&#x2F;int index &#x3D; original.lastIndexOf(&quot;.&quot;);</span><br><span class="line">         &#x2F;&#x2F;String suffix &#x3D; original.substring(index);</span><br><span class="line">         &#x2F;&#x2F;String newFileName &#x3D; UUID.randomUUID().toString()+suffix;</span><br><span class="line">         File file &#x3D; new File(folder,original);</span><br><span class="line">         try &#123;</span><br><span class="line">             attach.transferTo(file);</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">             return &quot;fail&quot;;</span><br><span class="line">         &#125;</span><br><span class="line">         return &quot;success&quot;+&quot;&quot;+uploadUrl+&quot;&#x2F;&quot;+original;</span><br><span class="line">     &#125;else &#123;</span><br><span class="line">         return &quot;fail&quot;;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>对接百度统计API</title>
    <url>/2020/10/10/Util/002_%E5%AF%B9%E6%8E%A5%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1API/</url>
    <content><![CDATA[<h1 id="对接百度统计API接口获取数据"><a href="#对接百度统计API接口获取数据" class="headerlink" title="对接百度统计API接口获取数据"></a>对接百度统计API接口获取数据</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.wisetech.baidu.utils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.wisetech.baidu.entity.Details;</span><br><span class="line">import com.wisetech.baidu.entity.Path;</span><br><span class="line">import com.wisetech.baidu.entity.Real;</span><br><span class="line">import com.wisetech.baidu.entity.vo.RealVo;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class RealVisitorUtil &#123;</span><br><span class="line">    public static List&lt;Real&gt; getData(RealVo realVo, String access_token)&#123;		</span><br><span class="line">		&#x2F;&#x2F;百度接口API地址</span><br><span class="line">		String url &#x3D; &quot;https:&#x2F;&#x2F;openapi.baidu.com&#x2F;rest&#x2F;2.0&#x2F;tongji&#x2F;report&#x2F;getData?	access_token&#x3D;&quot;+access_token+&quot;&amp;site_id&#x3D;14376608&amp;method&#x3D;trend&#x2F;latest&#x2F;a&amp;metrics&#x3D;area,searchword,visit_time,visit_pages&amp;order&#x3D;visit_pages,desc&amp;max_results&#x3D;5000&quot;;</span><br><span class="line">		Map&lt;String, String&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">		map.put(&quot;source&quot;,realVo.getSource());</span><br><span class="line">		map.put(&quot;clientDevice&quot;,realVo.getClientDevice());</span><br><span class="line">		map.put(&quot;visitor&quot;,realVo.getVisitor());</span><br><span class="line">		map.put(&quot;area&quot;,realVo.getArea());</span><br><span class="line">		map.put(&quot;start_date&quot;,realVo.getStart_date());</span><br><span class="line">		map.put(&quot;end_date&quot;,realVo.getEnd_date());</span><br><span class="line">        </span><br><span class="line">        String json &#x3D; HttpClientUtil.doPost(url,map);</span><br><span class="line">        List&lt;Real&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Real&gt; nullList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Path&gt; pathList;</span><br><span class="line">        if (json !&#x3D; null || !json.equals(&quot;&quot;)) &#123;</span><br><span class="line">            JSONObject jo &#x3D; JSONObject.parseObject(json);</span><br><span class="line">            JSONObject result &#x3D; jo.getJSONObject(&quot;result&quot;);</span><br><span class="line">            JSONArray items &#x3D; result.getJSONArray(&quot;items&quot;);</span><br><span class="line">            JSONArray detailArray &#x3D; (JSONArray) items.get(0);</span><br><span class="line">            JSONArray areaArray &#x3D; (JSONArray) items.get(1);</span><br><span class="line">            Real real;</span><br><span class="line">            Path path;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; detailArray.size(); i++) &#123;</span><br><span class="line">                pathList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">                real &#x3D; new Real();</span><br><span class="line">                JSONArray jsonArray &#x3D; detailArray.getJSONArray(i);</span><br><span class="line">                JSONObject detailObject &#x3D; jsonArray.getJSONObject(0);</span><br><span class="line">                &#x2F;&#x2F;通过JSONObject.parseObject把得到的json数据转换为实体类对象</span><br><span class="line">                Details details &#x3D; JSONObject.parseObject(detailObject.toJSONString(), Details.class);</span><br><span class="line">                JSONArray jsonArray1 &#x3D; areaArray.getJSONArray(i);</span><br><span class="line">                List&lt;String&gt; stringList &#x3D; JSONObject.parseObject(jsonArray1.toJSONString(), List.class);</span><br><span class="line">                real.setArea(stringList.get(0));</span><br><span class="line">                real.setAccessTime(details.getDetail().getPaths().get(0).get(0)+&quot;&quot;);</span><br><span class="line">                if(details.getDetail().getPaths().get(0).get(0).toString().length()&lt;10) &#123;</span><br><span class="line">                    real.setAccessTimeStr(details.getDetail().getPaths().get(0).get(0).toString());</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    real.setAccessTimeStr(details.getDetail().getPaths().get(0).get(0).toString().substring(0, 10));</span><br><span class="line">                &#125;</span><br><span class="line">                real.setBrowser(details.getDetail().getBrowser());</span><br><span class="line">                real.setAccessPage(details.getDetail().getAccessPage());</span><br><span class="line">                real.setBrowserType(details.getDetail().getBrowserType());</span><br><span class="line">                real.setColor(details.getDetail().getColor());</span><br><span class="line">                real.setCookie(details.getDetail().getCookie());</span><br><span class="line">                real.setEndPage(details.getDetail().getEndPage());</span><br><span class="line">                real.setFromType(details.getDetail().getFromType().getFromType());</span><br><span class="line">                real.setIsp(details.getDetail().getIsp());</span><br><span class="line">                real.setJava(details.getDetail().getJava());</span><br><span class="line">                real.setLastVisitTime(details.getDetail().getLastVisitTime());</span><br><span class="line">                real.setSource(stringList.get(1));</span><br><span class="line">                if(stringList.get(2).contains(&quot;--&quot;)||stringList.get(2).contains(&quot;未知&quot;))&#123;</span><br><span class="line">                    real.setVisitTime(&quot;未知&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    real.setVisitTime(TrendAnalyzeUtil.secToTime(Integer.parseInt(stringList.get(2))));</span><br><span class="line">                &#125;</span><br><span class="line">                for (int j &#x3D; 0; j &lt; details.getDetail().getPaths().size(); j++) &#123;</span><br><span class="line">                    path &#x3D; new Path();</span><br><span class="line">                    path.setTime(details.getDetail().getPaths().get(j).get(0).toString());</span><br><span class="line">                    path.setCount(details.getDetail().getPaths().get(j).get(1).toString());</span><br><span class="line">                    path.setUrl(details.getDetail().getPaths().get(j).get(2).toString());</span><br><span class="line">                    pathList.add(path);</span><br><span class="line">                &#125;</span><br><span class="line">                real.setPath(pathList);</span><br><span class="line">                real.setVisitType(details.getDetail().getVisitorType());</span><br><span class="line">                real.setOs(details.getDetail().getOs());</span><br><span class="line">                real.setLastPage(details.getDetail().getEndPage());</span><br><span class="line">                real.setResolution(details.getDetail().getResolution());</span><br><span class="line">                real.setOsType(details.getDetail().getDeviceType());</span><br><span class="line">                real.setVisitCount(details.getDetail().getVisitorFrequency());</span><br><span class="line"></span><br><span class="line">                list.add(real);</span><br><span class="line">            &#125;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        return nullList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>对身份证号判断是否成年</title>
    <url>/2021/03/19/Util/003_%E5%AF%B9%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E5%88%A4%E6%96%AD%E5%85%B6%E6%98%AF%E5%90%A6%E5%B7%B2%E6%88%90%E5%B9%B4/</url>
    <content><![CDATA[<h1 id="通过身份证号判断是否成年"><a href="#通过身份证号判断是否成年" class="headerlink" title="通过身份证号判断是否成年"></a>通过身份证号判断是否成年</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static boolean judgeAdult() throws ParseException &#123;</span><br><span class="line">		String code &#x3D; &quot;xxxxxx20030320xxxx&quot;;</span><br><span class="line">		int year &#x3D; Integer.parseInt(code.substring(6, 10));</span><br><span class="line">		SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyyMMdd&quot;);</span><br><span class="line">		Date update &#x3D; sdf.parse(String.valueOf(year + 18) + code.substring(10, 14));</span><br><span class="line">		Date today &#x3D; new Date();</span><br><span class="line">		return today.after(update);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果返回true则代表已成年-false反之"><a href="#运行结果返回true则代表已成年-false反之" class="headerlink" title="运行结果返回true则代表已成年  false反之"></a>运行结果返回true则代表已成年  false反之</h2>]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>解析excel数据插入数据库</title>
    <url>/2021/03/22/Util/004_%E8%A7%A3%E6%9E%90Excel%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="解析excel中的数据并操作数据"><a href="#解析excel中的数据并操作数据" class="headerlink" title="解析excel中的数据并操作数据"></a>解析excel中的数据并操作数据</h1><h2 id="首先我们导入用到的依赖"><a href="#首先我们导入用到的依赖" class="headerlink" title="首先我们导入用到的依赖"></a>首先我们导入用到的依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.poi&#x2F;poi --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;poi&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.17&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.poi&#x2F;poi-ooxml --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.17&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Transactional(rollbackFor &#x3D; Exception.class)</span><br><span class="line">public void importData() throws IOException, ParseException &#123;</span><br><span class="line">		SimpleDateFormat sf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;获取工作簿</span><br><span class="line">&#x2F;&#x2F;		XSSFWorkbook book &#x3D; new XSSFWorkbook(&quot;C:\\Users\\asus\\Desktop\\厂站网资产数据表\\污水厂设施数据整理.xlsx&quot;);</span><br><span class="line">		XSSFWorkbook book &#x3D; new XSSFWorkbook(filePath);</span><br><span class="line">		&#x2F;&#x2F;获取工作表（我这里数据库是主子表的关系，所以获取两个sheet）</span><br><span class="line">		XSSFSheet sheet1 &#x3D; book.getSheetAt(0);</span><br><span class="line">		XSSFSheet sheet2 &#x3D; book.getSheetAt(1);</span><br><span class="line">		List&lt;ZcFacilityMainSewageForzk&gt; zcFacilityMainSewageForzks &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">		List&lt;ZcFacilitySewageForzk&gt; zcFacilitySewageForzks &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">		ZcFacilityMainSewageForzk zcFacilityMainSewageForzk &#x3D; null;</span><br><span class="line">		&#x2F;&#x2F;普通for循环</span><br><span class="line">		&#x2F;&#x2F;开始索引0  结束索引</span><br><span class="line">		int lastRowNum &#x3D; sheet1.getLastRowNum();</span><br><span class="line">		System.out.println(&quot;最后一行：&quot;+lastRowNum);</span><br><span class="line">		for (int i &#x3D; 1; i &lt;&#x3D; lastRowNum; i++) &#123;</span><br><span class="line">			&#x2F;&#x2F;获取单元格</span><br><span class="line">			XSSFRow row1 &#x3D; sheet1.getRow(i);</span><br><span class="line">			XSSFRow row2 &#x3D; sheet2.getRow(i);</span><br><span class="line">			if(row1!&#x3D;null)&#123;</span><br><span class="line">				List&lt;String&gt; list &#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">				for (Cell cell : row1) &#123;</span><br><span class="line">					if(cell!&#x3D;null &amp;&amp; !&quot;&quot;.equals(cell))&#123;</span><br><span class="line">						&#x2F;&#x2F;此处是把单元格都转换成String类型</span><br><span class="line">						cell.setCellType(CellType.STRING);</span><br><span class="line">						String cellValue &#x3D; cell.getStringCellValue();</span><br><span class="line">						System.out.println(&quot;单元格数据：&quot;+cellValue);</span><br><span class="line">						System.out.println();</span><br><span class="line">						list.add(cellValue);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				if(list.size()&gt;0)&#123;</span><br><span class="line">				&#x2F;&#x2F;对excel中的数据绑定实体类</span><br><span class="line">					zcFacilityMainSewageForzk &#x3D; new ZcFacilityMainSewageForzk();</span><br><span class="line">					zcFacilityMainSewageForzk.setFacilityCode(list.get(1));</span><br><span class="line">					zcFacilityMainSewageForzk.setFacilityName(list.get(2));</span><br><span class="line">					zcFacilityMainSewageForzk.setFacilityType(&quot;9&quot;);</span><br><span class="line">					zcFacilityMainSewageForzk.setFacilityBmodel(list.get(4));</span><br><span class="line">					zcFacilityMainSewageForzk.setFacilitySmodel(list.get(5));</span><br><span class="line">					zcFacilityMainSewageForzk.setSewageId(list.get(6));</span><br><span class="line">					zcFacilityMainSewageForzk.setAddress(list.get(7));</span><br><span class="line">					zcFacilityMainSewageForzk.setFacilityStatus(&quot;1&quot;);</span><br><span class="line">					zcFacilityMainSewageForzk.setZoneId(&quot;7&quot;);</span><br><span class="line">					zcFacilityMainSewageForzk.setAddId(&quot;340203&quot;);</span><br><span class="line">					zcFacilityMainSewageForzk.setOrgUnit(&quot;芜湖三峡水务公司&quot;);</span><br><span class="line"></span><br><span class="line">					zcFacilityMainSewageForzk.setConstruction(list.get(12));</span><br><span class="line">					zcFacilityMainSewageForzk.setDesignUnit(list.get(13));</span><br><span class="line"></span><br><span class="line">					zcFacilityMainSewageForzk.setSupervisorUnit(list.get(14));</span><br><span class="line">					zcFacilityMainSewageForzk.setRecordTime(sf.parse(&quot;2020-11-25&quot;));</span><br><span class="line">					zcFacilityMainSewageForzk.setReportUnit(list.get(16));</span><br><span class="line">					zcFacilityMainSewageForzk.setReportDate(sf.parse(&quot;2020-12-02&quot;));</span><br><span class="line">					zcFacilityMainSewageForzk.setConstrUnit(list.get(18));</span><br><span class="line">					zcFacilityMainSewageForzk.setMaintainDeptname(list.get(19));</span><br><span class="line">&#x2F;&#x2F;					if(StringUtils.isNotBlank(list.get(20)))&#123;</span><br><span class="line">&#x2F;&#x2F;						zcFacilityMainSewageForzk.setBuildDate(sf.parse(list.get(20)));</span><br><span class="line">&#x2F;&#x2F;					&#125;</span><br><span class="line">					zcFacilityMainSewageForzk.setRemark(list.get(21));</span><br><span class="line">&#x2F;&#x2F;					zcFacilityMainSewageForzk.setSubarea(&quot;f5fe79ed31734966aec2efaa426a64e3&quot;);</span><br><span class="line">					zcFacilityMainSewageForzkService.save(zcFacilityMainSewageForzk);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			if(row2!&#x3D;null)&#123;</span><br><span class="line">				List&lt;String&gt; list &#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">				for (Cell cell : row2) &#123;</span><br><span class="line">					if(cell!&#x3D;null &amp;&amp; !&quot;&quot;.equals(cell))&#123;</span><br><span class="line">						&#x2F;&#x2F;此处是把单元格都转换成String类型</span><br><span class="line">						cell.setCellType(CellType.STRING);</span><br><span class="line">						String cellValue &#x3D; cell.getStringCellValue();</span><br><span class="line">						System.out.println(&quot;单元格数据：&quot;+cellValue);</span><br><span class="line">						System.out.println();</span><br><span class="line">						list.add(cellValue);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				if(list.size()&gt;0)&#123;</span><br><span class="line">					ZcFacilityInfraForzk zcFacilityInfraForzk &#x3D; new ZcFacilityInfraForzk();</span><br><span class="line">					zcFacilityInfraForzk.setMasterId(zcFacilityMainSewageForzk.getGuid());</span><br><span class="line">					if(StringUtils.isNotBlank(list.get(0))) &#123;</span><br><span class="line">						zcFacilityInfraForzk.setCoverArea(new BigDecimal(list.get(0)));</span><br><span class="line">					&#125;</span><br><span class="line">					if(StringUtils.isNotBlank(list.get(1))) &#123;</span><br><span class="line">						zcFacilityInfraForzk.setPlaneSize(list.get(1));</span><br><span class="line">					&#125;</span><br><span class="line">					zcFacilityInfraForzkService.save(zcFacilityInfraForzk);</span><br><span class="line">					ZcFacilitySewageForzk zcFacilitySewageForzk &#x3D; new ZcFacilitySewageForzk();</span><br><span class="line">					zcFacilitySewageForzk.setMasterId(zcFacilityMainSewageForzk.getGuid());</span><br><span class="line">					zcFacilitySewageForzk.setInCodcr(list.get(2));</span><br><span class="line">					zcFacilitySewageForzk.setInBod5(list.get(3));</span><br><span class="line">					zcFacilitySewageForzk.setInSs(list.get(4));</span><br><span class="line">					zcFacilitySewageForzk.setInNh3n(list.get(5));</span><br><span class="line">					zcFacilitySewageForzk.setInTn(list.get(6));</span><br><span class="line">					zcFacilitySewageForzk.setInTp(list.get(7));</span><br><span class="line">					zcFacilitySewageForzk.setOutCodcr(list.get(8));</span><br><span class="line">					zcFacilitySewageForzk.setOutBod5(list.get(9));</span><br><span class="line">					zcFacilitySewageForzk.setOutSs(list.get(10));</span><br><span class="line">					zcFacilitySewageForzk.setOutNh3n(list.get(11));</span><br><span class="line">					zcFacilitySewageForzk.setOutTn(list.get(12));</span><br><span class="line">					zcFacilitySewageForzk.setOutTp(list.get(13));</span><br><span class="line">					zcFacilitySewageForzk.setDesignSludgeRate(list.get(14));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">					zcFacilitySewageForzks.add(zcFacilitySewageForzk);</span><br><span class="line">					zcFacilitySewageForzkService.save(zcFacilitySewageForzk);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		for (ZcFacilityMainSewageForzk zcFacilityMainSewageForzk : zcFacilityMainSewageForzks) &#123;</span><br><span class="line">			System.out.println(zcFacilityMainSewageForzk);</span><br><span class="line">		&#125;</span><br><span class="line">		for (ZcFacilitySewageForzk zcFacilitySewageForzk : zcFacilitySewageForzks) &#123;</span><br><span class="line">			System.out.println(zcFacilitySewageForzk);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel导出动态头数据</title>
    <url>/2021/07/22/Util/005_%E5%AF%BC%E5%87%BAexcel%E5%8A%A8%E6%80%81%E8%A1%A8%E5%A4%B4/</url>
    <content><![CDATA[<h1 id="项目中监测数据需要做导出功能，这些数据没有固定的实体，没有固定的头部和数据。"><a href="#项目中监测数据需要做导出功能，这些数据没有固定的实体，没有固定的头部和数据。" class="headerlink" title="项目中监测数据需要做导出功能，这些数据没有固定的实体，没有固定的头部和数据。"></a>项目中监测数据需要做导出功能，这些数据没有固定的实体，没有固定的头部和数据。</h1><h2 id="所用到的依赖"><a href="#所用到的依赖" class="headerlink" title="所用到的依赖"></a>所用到的依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easyexcel&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;exportMonitorExcel&quot;)</span><br><span class="line">   public Result download1(HttpServletResponse response,@RequestParam(name &#x3D; &quot;id&quot;,required &#x3D; false) String id,@RequestParam(name &#x3D; &quot;pageSize&quot;,defaultValue &#x3D; &quot;10&quot;) Integer pageSize,@RequestParam(name &#x3D; &quot;pageNo&quot;,defaultValue &#x3D; &quot;1&quot;) Integer pageNo,@RequestParam(name &#x3D; &quot;startTime&quot;,required &#x3D; false) String startTime,@RequestParam(name &#x3D; &quot;endTime&quot;,required &#x3D; false) String endTime) throws IOException, ParseException &#123;</span><br><span class="line">	&#x2F;&#x2F;这里调用别的模块中的接口</span><br><span class="line">       Result&lt;QueryTableDataVo&gt; tableData &#x3D; monitorFeignClient.getTableData(id, pageSize, pageNo, startTime, endTime);</span><br><span class="line">       &#x2F;&#x2F;获取头部数据</span><br><span class="line">       List&lt;Object[]&gt; headerList &#x3D; tableData.getResult().getHeaderList();</span><br><span class="line">       &#x2F;&#x2F;获取表格数据</span><br><span class="line">       List&lt;Map&lt;String, Object&gt;&gt; dataList &#x3D; tableData.getResult().getDataList().getRecords();</span><br><span class="line">       List&lt;List&lt;String&gt;&gt; hList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">       AtomicInteger length &#x3D; new AtomicInteger();</span><br><span class="line">       AtomicReference&lt;String&gt; str &#x3D; new AtomicReference&lt;&gt;();</span><br><span class="line">       if(headerList!&#x3D;null&amp;&amp;dataList!&#x3D;null)&#123;</span><br><span class="line">           &#x2F;&#x2F;处理头部数据转换成动态excel需要的数据</span><br><span class="line">           headerList.forEach(s-&gt;&#123;</span><br><span class="line">               List&lt;String&gt; strings&#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">               strings.add(s[1].toString()+&quot;(&quot;+s[2].toString()+&quot;)&quot;+s[0].toString());</span><br><span class="line">               length.set(s[0].toString().length());</span><br><span class="line">               str.set(s[0].toString());</span><br><span class="line">               hList.add(strings);</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F;处理table页的数据 并且数据与头部guid相对应</span><br><span class="line">           Map&lt;Date,Object&gt; timeMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">           SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">           dataList.forEach(s-&gt;&#123;</span><br><span class="line">               &#x2F;&#x2F;根据时间排序    key：时间   value：整个对象</span><br><span class="line">               try &#123;</span><br><span class="line">                   timeMap.put(sdf.parse(s.get(&quot;update_time&quot;).toString()),s);</span><br><span class="line">               &#125; catch (ParseException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           List&lt;Date&gt; updateTimeKeyList &#x3D; new ArrayList&lt;&gt;(timeMap.keySet());</span><br><span class="line">           &#x2F;&#x2F;按时间改为升序排序</span><br><span class="line">           updateTimeKeyList.sort(Comparator.comparing(Date::getTime).reversed());</span><br><span class="line"></span><br><span class="line">           List&lt;List&lt;String&gt;&gt; lists &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">           for (Date date : updateTimeKeyList) &#123;</span><br><span class="line">               JSONObject jsonObject &#x3D; JSONObject.parseObject(JSON.toJSONString(timeMap.get(date)));</span><br><span class="line"></span><br><span class="line">               List&lt;String&gt; a &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">               hList.forEach(head-&gt;&#123;</span><br><span class="line">                   for (String s : head) &#123;</span><br><span class="line">                       String nb &#x3D; s.substring(s.length() - length.get());</span><br><span class="line">                       JSONObject dataStr &#x3D; jsonObject.getJSONObject(nb);</span><br><span class="line">                       if(dataStr!&#x3D;null)&#123;</span><br><span class="line">                           a.add(dataStr.getString(&quot;value&quot;));</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               a.add(jsonObject.getString(&quot;update_time&quot;));</span><br><span class="line">               a.add(jsonObject.getString(&quot;monitorPointName&quot;));</span><br><span class="line">               lists.add(a);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           List&lt;String&gt; strings1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">           strings1.add(&quot;监测时间&quot;+str);</span><br><span class="line"></span><br><span class="line">           List&lt;String&gt; strings2 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">           strings2.add(&quot;监测点&quot;+str);</span><br><span class="line"></span><br><span class="line">           hList.add(strings1);</span><br><span class="line">           hList.add(strings2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F;处理一下头部集合</span><br><span class="line">           List&lt;List&lt;String&gt;&gt; endhead &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">           hList.forEach(head-&gt;&#123;</span><br><span class="line">               head.forEach(h-&gt;&#123;</span><br><span class="line">                   List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">                   String a &#x3D; h.substring(0, h.length() - length.get());</span><br><span class="line">                   strings.add(a);</span><br><span class="line">                   endhead.add(strings);</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           response.setContentType(&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);</span><br><span class="line">           response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">           &#x2F;&#x2F; 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span><br><span class="line">           String fileName &#x3D; URLEncoder.encode(&quot;监测一览数据导出&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\+&quot;, &quot;%20&quot;);</span><br><span class="line">           response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*&#x3D;utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;);</span><br><span class="line">           EasyExcel.write(response.getOutputStream()).head(endhead).sheet(&quot;数据一览&quot;).doWrite(lists);</span><br><span class="line">           return Result.ok(&quot;导出成功！&quot;);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           return Result.error(&quot;返回数据为空！&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>修改硬盘或者U盘的图标</title>
    <url>/2021/03/28/play/001_%E4%BF%AE%E6%94%B9%E7%A1%AC%E7%9B%98%E6%88%96U%E7%9B%98%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h1 id="修改硬盘或者U盘的图标"><a href="#修改硬盘或者U盘的图标" class="headerlink" title="修改硬盘或者U盘的图标"></a>修改硬盘或者U盘的图标</h1><p><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/1a07f600bda0c9de15398be9ac69fbc97ef086a5b77fb5ee11cd7b1e6ee3e9216c11851db35a61bad6c4c60bf19d6250?pictype=scale&from=30113&version=3.3.3.3&uin=2114512549&fname=PKVRU59%60%7BS0AG%5DQP0UOPNOC.png&size=750" alt="avatar"></p>
<h2 id="先来到ico网站http-www-ico51-cn在线生成透明ICO图标，选择图片，然后点击64-64，点击生成。"><a href="#先来到ico网站http-www-ico51-cn在线生成透明ICO图标，选择图片，然后点击64-64，点击生成。" class="headerlink" title="先来到ico网站http://www.ico51.cn在线生成透明ICO图标，选择图片，然后点击64*64，点击生成。"></a>先来到ico网站<span style="color:red"><a href="http://www.ico51.cn/">http://www.ico51.cn</a></span>在线生成透明ICO图标，选择图片，然后点击<span style="color:red">64*64</span>，点击生成。</h2><h3 id="步骤1-桌面新建个文本文档，命名为-autorun-txt。右键编辑内容为步骤2-autorun-ICON-favicon-ico-0步骤3-保存-修改文件名为-autorun-inf步骤4-把autorun-inf文件和xxx-ico图标一块放到硬盘中重启即可"><a href="#步骤1-桌面新建个文本文档，命名为-autorun-txt。右键编辑内容为步骤2-autorun-ICON-favicon-ico-0步骤3-保存-修改文件名为-autorun-inf步骤4-把autorun-inf文件和xxx-ico图标一块放到硬盘中重启即可" class="headerlink" title="步骤1.桌面新建个文本文档，命名为 autorun.txt。右键编辑内容为步骤2.[autorun]  ICON=favicon.ico,0步骤3.保存 修改文件名为 autorun.inf步骤4.把autorun.inf文件和xxx.ico图标一块放到硬盘中重启即可."></a>步骤1.桌面新建个文本文档，命名为 autorun.txt。右键编辑内容为<br/>步骤2.<br/><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/11395f245dd484a003bc473684730d58863295442c2d31f56165a28011a7c2ae9a4487220fb6563d71b79ac5517384c7?pictype=scale&from=30113&version=3.3.3.3&uin=2114512549&fname=MLJ6T)T$IMV67DZDH7U014H.png&size=750" alt="avatar"><span style="color:red">[autorun]  ICON=favicon.ico,0</span><br>步骤3.保存 修改文件名为 autorun.inf<br>步骤4.把autorun.inf文件和xxx.ico图标一块放到硬盘中<span style="color:red">重启</span>即可.</h3>]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>娱乐</tag>
      </tags>
  </entry>
</search>
