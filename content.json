{"meta":{"title":"LX 博客","subtitle":"","description":"","author":"刘旭","url":"http://example.com","root":"/"},"pages":[{"title":"分類","date":"2021-01-02T06:23:55.000Z","updated":"2021-01-09T11:12:13.760Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"关于自己","date":"2021-01-02T06:23:05.000Z","updated":"2021-05-11T07:03:34.289Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":".checkbox { display: -webkit-flex; display: flex; -webkit-align-items: center; align-items: center; } .checkbox.green input { border-color: #3dc550; } .checkbox.blue input { border-color: #0000FF } .checkbox.yellow input { border-color: #FFFF00 } .checkbox.red input { border-color: #ff0000; } .checkbox input[type=radio] { border-radius: 50%; } .checkbox input { -webkit-appearance: none; -o-appearance: none; appearance: none; position: relative; height: 16px; width: 16px; transition: all .15s ease-out 0s; cursor: pointer; display: inline-block; outline: 0; border-radius: 2px; -webkit-flex-shrink: 0; flex-shrink: 0; margin-right: 8px; border: 2px solid #2196f3; } [type=checkbox], [type=radio] { box-sizing: border-box; padding: 0; } button, input { overflow: visible; } button, input, optgroup, select, textarea { font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; } 🍀个人简介 坐标杭州🌏，永远热爱🤞 对一切新鲜的事物充满好奇🧐 目标是成为一名出色的后端工程师💪 对自己的要求是每天都要比昨天进步一点点👊"},{"title":"友情鏈接","date":"2021-01-02T06:27:47.000Z","updated":"2021-01-09T11:24:59.752Z","comments":false,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"聆听这世界","date":"2020-04-15T02:01:14.000Z","updated":"2021-05-11T03:22:16.885Z","comments":false,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"个人歌单"},{"title":"那些年,我看過的電影","date":"2021-01-02T06:27:47.000Z","updated":"2021-01-09T11:07:47.189Z","comments":false,"path":"movies/index.html","permalink":"http://example.com/movies/index.html","excerpt":"","text":"過去、現在、未來 鬼吹灯·昆仑神宫"},{"title":"记录这世界","date":"2021-01-02T10:10:50.000Z","updated":"2021-05-11T06:48:29.293Z","comments":false,"path":"photo/index.html","permalink":"http://example.com/photo/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸 OH MY GIRL 关于MY GIRL的图片"},{"title":"友情鏈接","date":"2021-01-02T06:27:47.000Z","updated":"2021-05-11T07:19:47.712Z","comments":false,"path":"yx/index.html","permalink":"http://example.com/yx/index.html","excerpt":"","text":""},{"title":"標籤","date":"2021-01-02T06:23:05.000Z","updated":"2021-01-09T11:13:41.978Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"My girl","date":"2021-01-02T10:15:44.000Z","updated":"2021-08-10T09:09:24.059Z","comments":false,"path":"photo/ohmygirl/index.html","permalink":"http://example.com/photo/ohmygirl/index.html","excerpt":"","text":"还没有girl"},{"title":"壁纸","date":"2021-01-02T10:15:44.000Z","updated":"2021-05-11T06:50:10.073Z","comments":false,"path":"photo/wallpaper/index.html","permalink":"http://example.com/photo/wallpaper/index.html","excerpt":"","text":"暂无"}],"posts":[{"title":"Oracle设置自增长列","slug":"Oracle/002_oracle设置列自增长","date":"2021-08-09T16:00:00.000Z","updated":"2021-08-10T08:46:15.619Z","comments":true,"path":"2021/08/10/Oracle/002_oracle设置列自增长/","link":"","permalink":"http://example.com/2021/08/10/Oracle/002_oracle%E8%AE%BE%E7%BD%AE%E5%88%97%E8%87%AA%E5%A2%9E%E9%95%BF/","excerpt":"","text":"oracle给列设置自增长首先创建序列123456create sequence zcstation_sortminvalue 1nomaxvalue increment by 1 start with 1nocache; 设置触发器12345create or replace trigger demo6_tg_insertIdbefore insert on zc_station for each row begin select zcstation_sort.Nextval into:new.sort from dual;end; 一些别的命令123456789&#x2F;&#x2F;查询所有序列select * from user_sequences&#x2F;&#x2F;删除序列（ZC_STATION_SEQ为序列名称）DROP SEQUENCE zcstation_sort;&#x2F;&#x2F;查询触发器（模糊查询）select trigger_name from all_triggers where trigger_name like &#39;%DEMO6%&#39;; &#x2F;&#x2F;根据trigger_name删除触发器DROP TRIGGER INSERT_ZC_STATION_ID_AUTOINC;DROP TRIGGER DEMO6_TG_INSERTID;","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/tags/Oracle/"}]},{"title":"Excel导出动态头数据","slug":"Util/005_导出excel动态表头","date":"2021-07-21T16:00:00.000Z","updated":"2021-08-09T05:56:13.183Z","comments":true,"path":"2021/07/22/Util/005_导出excel动态表头/","link":"","permalink":"http://example.com/2021/07/22/Util/005_%E5%AF%BC%E5%87%BAexcel%E5%8A%A8%E6%80%81%E8%A1%A8%E5%A4%B4/","excerpt":"","text":"项目中监测数据需要做导出功能，这些数据没有固定的实体，没有固定的头部和数据。所用到的依赖12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt; &lt;artifactId&gt;easyexcel&lt;&#x2F;artifactId&gt; &lt;version&gt;2.2.7&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt; 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091@GetMapping(&quot;&#x2F;exportMonitorExcel&quot;) public Result download1(HttpServletResponse response,@RequestParam(name &#x3D; &quot;id&quot;,required &#x3D; false) String id,@RequestParam(name &#x3D; &quot;pageSize&quot;,defaultValue &#x3D; &quot;10&quot;) Integer pageSize,@RequestParam(name &#x3D; &quot;pageNo&quot;,defaultValue &#x3D; &quot;1&quot;) Integer pageNo,@RequestParam(name &#x3D; &quot;startTime&quot;,required &#x3D; false) String startTime,@RequestParam(name &#x3D; &quot;endTime&quot;,required &#x3D; false) String endTime) throws IOException, ParseException &#123; &#x2F;&#x2F;这里调用别的模块中的接口 Result&lt;QueryTableDataVo&gt; tableData &#x3D; monitorFeignClient.getTableData(id, pageSize, pageNo, startTime, endTime); &#x2F;&#x2F;获取头部数据 List&lt;Object[]&gt; headerList &#x3D; tableData.getResult().getHeaderList(); &#x2F;&#x2F;获取表格数据 List&lt;Map&lt;String, Object&gt;&gt; dataList &#x3D; tableData.getResult().getDataList().getRecords(); List&lt;List&lt;String&gt;&gt; hList &#x3D; new ArrayList&lt;&gt;(); AtomicInteger length &#x3D; new AtomicInteger(); AtomicReference&lt;String&gt; str &#x3D; new AtomicReference&lt;&gt;(); if(headerList!&#x3D;null&amp;&amp;dataList!&#x3D;null)&#123; &#x2F;&#x2F;处理头部数据转换成动态excel需要的数据 headerList.forEach(s-&gt;&#123; List&lt;String&gt; strings&#x3D; new ArrayList&lt;&gt;(); strings.add(s[1].toString()+&quot;(&quot;+s[2].toString()+&quot;)&quot;+s[0].toString()); length.set(s[0].toString().length()); str.set(s[0].toString()); hList.add(strings); &#125;); &#x2F;&#x2F;处理table页的数据 并且数据与头部guid相对应 Map&lt;Date,Object&gt; timeMap &#x3D; new HashMap&lt;&gt;(); SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;); dataList.forEach(s-&gt;&#123; &#x2F;&#x2F;根据时间排序 key：时间 value：整个对象 try &#123; timeMap.put(sdf.parse(s.get(&quot;update_time&quot;).toString()),s); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; &#125;); List&lt;Date&gt; updateTimeKeyList &#x3D; new ArrayList&lt;&gt;(timeMap.keySet()); &#x2F;&#x2F;按时间改为升序排序 updateTimeKeyList.sort(Comparator.comparing(Date::getTime).reversed()); List&lt;List&lt;String&gt;&gt; lists &#x3D; new ArrayList&lt;&gt;(); for (Date date : updateTimeKeyList) &#123; JSONObject jsonObject &#x3D; JSONObject.parseObject(JSON.toJSONString(timeMap.get(date))); List&lt;String&gt; a &#x3D; new ArrayList&lt;&gt;(); hList.forEach(head-&gt;&#123; for (String s : head) &#123; String nb &#x3D; s.substring(s.length() - length.get()); JSONObject dataStr &#x3D; jsonObject.getJSONObject(nb); if(dataStr!&#x3D;null)&#123; a.add(dataStr.getString(&quot;value&quot;)); &#125; &#125; &#125;); a.add(jsonObject.getString(&quot;update_time&quot;)); a.add(jsonObject.getString(&quot;monitorPointName&quot;)); lists.add(a); &#125; List&lt;String&gt; strings1 &#x3D; new ArrayList&lt;&gt;(); strings1.add(&quot;监测时间&quot;+str); List&lt;String&gt; strings2 &#x3D; new ArrayList&lt;&gt;(); strings2.add(&quot;监测点&quot;+str); hList.add(strings1); hList.add(strings2); &#x2F;&#x2F;处理一下头部集合 List&lt;List&lt;String&gt;&gt; endhead &#x3D; new ArrayList&lt;&gt;(); hList.forEach(head-&gt;&#123; head.forEach(h-&gt;&#123; List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(); String a &#x3D; h.substring(0, h.length() - length.get()); strings.add(a); endhead.add(strings); &#125;); &#125;); response.setContentType(&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;); response.setCharacterEncoding(&quot;utf-8&quot;); &#x2F;&#x2F; 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系 String fileName &#x3D; URLEncoder.encode(&quot;监测一览数据导出&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;); response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*&#x3D;utf-8&#39;&#39;&quot; + fileName + &quot;.xlsx&quot;); EasyExcel.write(response.getOutputStream()).head(endhead).sheet(&quot;数据一览&quot;).doWrite(lists); return Result.ok(&quot;导出成功！&quot;); &#125;else&#123; return Result.error(&quot;返回数据为空！&quot;); &#125; &#125;","categories":[{"name":"Util","slug":"Util","permalink":"http://example.com/categories/Util/"}],"tags":[{"name":"Util","slug":"Util","permalink":"http://example.com/tags/Util/"}]},{"title":"对list常用的几种操作","slug":"Java/003_对list常用的几种操作","date":"2021-05-07T16:00:00.000Z","updated":"2021-05-08T07:44:35.705Z","comments":true,"path":"2021/05/08/Java/003_对list常用的几种操作/","link":"","permalink":"http://example.com/2021/05/08/Java/003_%E5%AF%B9list%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%93%8D%E4%BD%9C/","excerpt":"","text":"1.对集合中每个对象根据具体属性进行排序根据学生的年龄进行降序1list.sort(Comparator.comparing(Student::getAge).reversed()); 根据学生年龄升序1list.sort(Comparator.comparing(Student::getAge)); 2.过滤集合中的每个对象的属性是否符合判断依据下面的例子是过滤掉设备状态为3的1list.stream().filter(s -&gt; !s.getDeviceStatus().equals(&quot;3&quot;)).collect(Collectors.toList()) 3.当集合中对象有多个属性 而我们只用其中一个属性时过滤掉其他属性 只拿出guid一个属性进行其他操作1list.stream().map(ZcFacilityMainSewageForzk::getGuid).collect(Collectors.toList()) 4.集合中对象的属性有相同的值进行分组并操作123456789&#x2F;&#x2F;这里是对ZcStoreStockForzk库存对象中的spareCode属性值一样的进行分组groupingByMap&lt;String, List&lt;ZcStoreStockForzk&gt;&gt; map &#x3D; zcStoreStockForzkService.list().stream().collect(Collectors.groupingBy(ZcStoreStockForzk::getSpareCode)); map.forEach((k, v) -&gt; &#123; EchartsVO echartsVO &#x3D; new EchartsVO(); echartsVO.setName(v.get(0).getSpareName()); &#x2F;&#x2F;对编码一样的库存数量进行相加 echartsVO.setValue(v.stream().mapToInt(ZcStoreStockForzk::getStockAmount).sum()); list.add(echartsVO); &#125;);","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"修改硬盘或者U盘的图标","slug":"play/001_修改硬盘或U盘图标","date":"2021-03-27T16:00:00.000Z","updated":"2021-05-08T06:34:23.949Z","comments":true,"path":"2021/03/28/play/001_修改硬盘或U盘图标/","link":"","permalink":"http://example.com/2021/03/28/play/001_%E4%BF%AE%E6%94%B9%E7%A1%AC%E7%9B%98%E6%88%96U%E7%9B%98%E5%9B%BE%E6%A0%87/","excerpt":"","text":"修改硬盘或者U盘的图标 先来到ico网站http://www.ico51.cn在线生成透明ICO图标，选择图片，然后点击64*64，点击生成。步骤1.桌面新建个文本文档，命名为 autorun.txt。右键编辑内容为步骤2.[autorun] ICON=favicon.ico,0步骤3.保存 修改文件名为 autorun.inf步骤4.把autorun.inf文件和xxx.ico图标一块放到硬盘中重启即可.","categories":[{"name":"娱乐","slug":"娱乐","permalink":"http://example.com/categories/%E5%A8%B1%E4%B9%90/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"http://example.com/tags/%E5%A8%B1%E4%B9%90/"}]},{"title":"解析excel数据插入数据库","slug":"Util/004_解析Excel中的数据","date":"2021-03-21T16:00:00.000Z","updated":"2021-03-22T09:48:26.884Z","comments":true,"path":"2021/03/22/Util/004_解析Excel中的数据/","link":"","permalink":"http://example.com/2021/03/22/Util/004_%E8%A7%A3%E6%9E%90Excel%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/","excerpt":"","text":"解析excel中的数据并操作数据首先我们导入用到的依赖12345678910111213&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.poi&#x2F;poi --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt; &lt;artifactId&gt;poi&lt;&#x2F;artifactId&gt; &lt;version&gt;3.17&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.poi&#x2F;poi-ooxml --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt; &lt;version&gt;3.17&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; 代码块123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118@Transactional(rollbackFor &#x3D; Exception.class)public void importData() throws IOException, ParseException &#123; SimpleDateFormat sf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); &#x2F;&#x2F;获取工作簿&#x2F;&#x2F; XSSFWorkbook book &#x3D; new XSSFWorkbook(&quot;C:\\\\Users\\\\asus\\\\Desktop\\\\厂站网资产数据表\\\\污水厂设施数据整理.xlsx&quot;); XSSFWorkbook book &#x3D; new XSSFWorkbook(filePath); &#x2F;&#x2F;获取工作表（我这里数据库是主子表的关系，所以获取两个sheet） XSSFSheet sheet1 &#x3D; book.getSheetAt(0); XSSFSheet sheet2 &#x3D; book.getSheetAt(1); List&lt;ZcFacilityMainSewageForzk&gt; zcFacilityMainSewageForzks &#x3D; new ArrayList&lt;&gt;(); List&lt;ZcFacilitySewageForzk&gt; zcFacilitySewageForzks &#x3D; new ArrayList&lt;&gt;(); ZcFacilityMainSewageForzk zcFacilityMainSewageForzk &#x3D; null; &#x2F;&#x2F;普通for循环 &#x2F;&#x2F;开始索引0 结束索引 int lastRowNum &#x3D; sheet1.getLastRowNum(); System.out.println(&quot;最后一行：&quot;+lastRowNum); for (int i &#x3D; 1; i &lt;&#x3D; lastRowNum; i++) &#123; &#x2F;&#x2F;获取单元格 XSSFRow row1 &#x3D; sheet1.getRow(i); XSSFRow row2 &#x3D; sheet2.getRow(i); if(row1!&#x3D;null)&#123; List&lt;String&gt; list &#x3D;new ArrayList&lt;&gt;(); for (Cell cell : row1) &#123; if(cell!&#x3D;null &amp;&amp; !&quot;&quot;.equals(cell))&#123; &#x2F;&#x2F;此处是把单元格都转换成String类型 cell.setCellType(CellType.STRING); String cellValue &#x3D; cell.getStringCellValue(); System.out.println(&quot;单元格数据：&quot;+cellValue); System.out.println(); list.add(cellValue); &#125; &#125; if(list.size()&gt;0)&#123; &#x2F;&#x2F;对excel中的数据绑定实体类 zcFacilityMainSewageForzk &#x3D; new ZcFacilityMainSewageForzk(); zcFacilityMainSewageForzk.setFacilityCode(list.get(1)); zcFacilityMainSewageForzk.setFacilityName(list.get(2)); zcFacilityMainSewageForzk.setFacilityType(&quot;9&quot;); zcFacilityMainSewageForzk.setFacilityBmodel(list.get(4)); zcFacilityMainSewageForzk.setFacilitySmodel(list.get(5)); zcFacilityMainSewageForzk.setSewageId(list.get(6)); zcFacilityMainSewageForzk.setAddress(list.get(7)); zcFacilityMainSewageForzk.setFacilityStatus(&quot;1&quot;); zcFacilityMainSewageForzk.setZoneId(&quot;7&quot;); zcFacilityMainSewageForzk.setAddId(&quot;340203&quot;); zcFacilityMainSewageForzk.setOrgUnit(&quot;芜湖三峡水务公司&quot;); zcFacilityMainSewageForzk.setConstruction(list.get(12)); zcFacilityMainSewageForzk.setDesignUnit(list.get(13)); zcFacilityMainSewageForzk.setSupervisorUnit(list.get(14)); zcFacilityMainSewageForzk.setRecordTime(sf.parse(&quot;2020-11-25&quot;)); zcFacilityMainSewageForzk.setReportUnit(list.get(16)); zcFacilityMainSewageForzk.setReportDate(sf.parse(&quot;2020-12-02&quot;)); zcFacilityMainSewageForzk.setConstrUnit(list.get(18)); zcFacilityMainSewageForzk.setMaintainDeptname(list.get(19));&#x2F;&#x2F; if(StringUtils.isNotBlank(list.get(20)))&#123;&#x2F;&#x2F; zcFacilityMainSewageForzk.setBuildDate(sf.parse(list.get(20)));&#x2F;&#x2F; &#125; zcFacilityMainSewageForzk.setRemark(list.get(21));&#x2F;&#x2F; zcFacilityMainSewageForzk.setSubarea(&quot;f5fe79ed31734966aec2efaa426a64e3&quot;); zcFacilityMainSewageForzkService.save(zcFacilityMainSewageForzk); &#125; &#125; if(row2!&#x3D;null)&#123; List&lt;String&gt; list &#x3D;new ArrayList&lt;&gt;(); for (Cell cell : row2) &#123; if(cell!&#x3D;null &amp;&amp; !&quot;&quot;.equals(cell))&#123; &#x2F;&#x2F;此处是把单元格都转换成String类型 cell.setCellType(CellType.STRING); String cellValue &#x3D; cell.getStringCellValue(); System.out.println(&quot;单元格数据：&quot;+cellValue); System.out.println(); list.add(cellValue); &#125; &#125; if(list.size()&gt;0)&#123; ZcFacilityInfraForzk zcFacilityInfraForzk &#x3D; new ZcFacilityInfraForzk(); zcFacilityInfraForzk.setMasterId(zcFacilityMainSewageForzk.getGuid()); if(StringUtils.isNotBlank(list.get(0))) &#123; zcFacilityInfraForzk.setCoverArea(new BigDecimal(list.get(0))); &#125; if(StringUtils.isNotBlank(list.get(1))) &#123; zcFacilityInfraForzk.setPlaneSize(list.get(1)); &#125; zcFacilityInfraForzkService.save(zcFacilityInfraForzk); ZcFacilitySewageForzk zcFacilitySewageForzk &#x3D; new ZcFacilitySewageForzk(); zcFacilitySewageForzk.setMasterId(zcFacilityMainSewageForzk.getGuid()); zcFacilitySewageForzk.setInCodcr(list.get(2)); zcFacilitySewageForzk.setInBod5(list.get(3)); zcFacilitySewageForzk.setInSs(list.get(4)); zcFacilitySewageForzk.setInNh3n(list.get(5)); zcFacilitySewageForzk.setInTn(list.get(6)); zcFacilitySewageForzk.setInTp(list.get(7)); zcFacilitySewageForzk.setOutCodcr(list.get(8)); zcFacilitySewageForzk.setOutBod5(list.get(9)); zcFacilitySewageForzk.setOutSs(list.get(10)); zcFacilitySewageForzk.setOutNh3n(list.get(11)); zcFacilitySewageForzk.setOutTn(list.get(12)); zcFacilitySewageForzk.setOutTp(list.get(13)); zcFacilitySewageForzk.setDesignSludgeRate(list.get(14)); zcFacilitySewageForzks.add(zcFacilitySewageForzk); zcFacilitySewageForzkService.save(zcFacilitySewageForzk); &#125; &#125; &#125; for (ZcFacilityMainSewageForzk zcFacilityMainSewageForzk : zcFacilityMainSewageForzks) &#123; System.out.println(zcFacilityMainSewageForzk); &#125; for (ZcFacilitySewageForzk zcFacilitySewageForzk : zcFacilitySewageForzks) &#123; System.out.println(zcFacilitySewageForzk); &#125; &#125;","categories":[{"name":"Util","slug":"Util","permalink":"http://example.com/categories/Util/"}],"tags":[{"name":"Util","slug":"Util","permalink":"http://example.com/tags/Util/"}]},{"title":"对身份证号判断是否成年","slug":"Util/003_对身份证号判断其是否已成年","date":"2021-03-18T16:00:00.000Z","updated":"2021-03-19T09:14:19.027Z","comments":true,"path":"2021/03/19/Util/003_对身份证号判断其是否已成年/","link":"","permalink":"http://example.com/2021/03/19/Util/003_%E5%AF%B9%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E5%88%A4%E6%96%AD%E5%85%B6%E6%98%AF%E5%90%A6%E5%B7%B2%E6%88%90%E5%B9%B4/","excerpt":"","text":"通过身份证号判断是否成年12345678public static boolean judgeAdult() throws ParseException &#123; String code &#x3D; &quot;xxxxxx20030320xxxx&quot;; int year &#x3D; Integer.parseInt(code.substring(6, 10)); SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyyMMdd&quot;); Date update &#x3D; sdf.parse(String.valueOf(year + 18) + code.substring(10, 14)); Date today &#x3D; new Date(); return today.after(update); &#125; 运行结果返回true则代表已成年 false反之","categories":[{"name":"Util","slug":"Util","permalink":"http://example.com/categories/Util/"}],"tags":[{"name":"Util","slug":"Util","permalink":"http://example.com/tags/Util/"}]},{"title":"FeignClient的使用","slug":"Java/002_feign调用","date":"2021-03-09T16:00:00.000Z","updated":"2021-03-10T07:00:34.070Z","comments":true,"path":"2021/03/10/Java/002_feign调用/","link":"","permalink":"http://example.com/2021/03/10/Java/002_feign%E8%B0%83%E7%94%A8/","excerpt":"","text":"简单的FeignClient服务之间调用的注入Bean使用Client方法1234567891011121314@FeignClient( name &#x3D; &quot;cmp-wh-device&quot;, &#x2F;&#x2F;服务提供方的服务名称 contextId &#x3D; &quot;zcDeviceClient&quot;, &#x2F;&#x2F;为每个Client手动指定不同的contextId 防止Bean冲突 configuration &#x3D; &#123;FeignConfig.class&#125;, &#x2F;&#x2F;Feign配置类，可以自定义Feign的Encoder、Decoder、LogLevel、Contract fallbackFactory &#x3D; ZcDeviceClientFallBackFactory.class &#x2F;&#x2F;工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码)public interface IZcDeviceClient &#123; @GetMapping(&#123;&quot;&#x2F;wh-device&#x2F;maintenance&#x2F;area&#x2F;list&quot;&#125;) Result&lt;IPage&lt;MaintenanceArea&gt;&gt; queryPageList(@RequestParam MaintenanceArea entity, @RequestParam Integer pageNo, @RequestParam Integer pageSize, @RequestParam String minCreateTime, @RequestParam String maxCreateTime, @RequestParam HttpServletRequest req); @GetMapping(&quot;&#x2F;wh-device&#x2F;maintenance&#x2F;area&#x2F;queryByGuid&quot;) Result&lt;MaintenanceArea&gt; queryByGuid(@RequestParam String guid);&#125; Hystrix的ClientFallBackFactory方法当某个服务单元发生故障后,通过断路器的故障监控(类似熔断保险丝),向调用方法返回一个服务预期的,可处理的备选响应,而不是长时间的等待或者抛出调用方法无法处理的异常了.这样就可以保证了服务调用方的线程不会被长时间,不必要的占用,从而避免故障在分布式系统中的蔓延,乃至雪崩.代码如下123456789101112131415161718192021222324@Component &#x2F;&#x2F;需要使用@Component注解，保证fallback类被Spring容器扫描到public class ZcDeviceClientFallBackFactory implements FallbackFactory&lt;IZcDeviceClient&gt; &#123; private static final Logger log &#x3D; LoggerFactory.getLogger(ZcDeviceClientFallBackFactory.class); public ZcDeviceClientFallBackFactory()&#123; &#125; @Override public IZcDeviceClient create(Throwable throwable) &#123; return new IZcDeviceClient() &#123; public Result&lt;IPage&lt;MaintenanceArea&gt;&gt; queryPageList(MaintenanceArea entity, Integer pageNo, Integer pageSize, String minCreateTime, String maxCreateTime, HttpServletRequest req) &#123; ZcDeviceClientFallBackFactory.log.error(&quot;查询发送错误&quot;,throwable); return null; &#125; @Override public Result&lt;MaintenanceArea&gt; queryByGuid(String guid) &#123; ZcDeviceClientFallBackFactory.log.error(&quot;查询发送错误&quot;,throwable); return null; &#125; &#125;; &#125;&#125; 接下里就可以在实现类，控制层调用Client方法1234@Autowiredprivate IZcDeviceClient zcDeviceClient;&#x2F;&#x2F;todo 操作","categories":[{"name":"Feign","slug":"Feign","permalink":"http://example.com/categories/Feign/"}],"tags":[{"name":"Feign","slug":"Feign","permalink":"http://example.com/tags/Feign/"}]},{"title":"对接百度统计API","slug":"Util/002_对接百度统计API","date":"2020-10-09T16:00:00.000Z","updated":"2021-05-08T07:29:10.416Z","comments":true,"path":"2020/10/10/Util/002_对接百度统计API/","link":"","permalink":"http://example.com/2020/10/10/Util/002_%E5%AF%B9%E6%8E%A5%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1API/","excerpt":"","text":"对接百度统计API接口获取数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package com.wisetech.baidu.utils;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.wisetech.baidu.entity.Details;import com.wisetech.baidu.entity.Path;import com.wisetech.baidu.entity.Real;import com.wisetech.baidu.entity.vo.RealVo;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class RealVisitorUtil &#123; public static List&lt;Real&gt; getData(RealVo realVo, String access_token)&#123; &#x2F;&#x2F;百度接口API地址 String url &#x3D; &quot;https:&#x2F;&#x2F;openapi.baidu.com&#x2F;rest&#x2F;2.0&#x2F;tongji&#x2F;report&#x2F;getData? access_token&#x3D;&quot;+access_token+&quot;&amp;site_id&#x3D;14376608&amp;method&#x3D;trend&#x2F;latest&#x2F;a&amp;metrics&#x3D;area,searchword,visit_time,visit_pages&amp;order&#x3D;visit_pages,desc&amp;max_results&#x3D;5000&quot;; Map&lt;String, String&gt; map &#x3D; new HashMap&lt;&gt;(); map.put(&quot;source&quot;,realVo.getSource()); map.put(&quot;clientDevice&quot;,realVo.getClientDevice()); map.put(&quot;visitor&quot;,realVo.getVisitor()); map.put(&quot;area&quot;,realVo.getArea()); map.put(&quot;start_date&quot;,realVo.getStart_date()); map.put(&quot;end_date&quot;,realVo.getEnd_date()); String json &#x3D; HttpClientUtil.doPost(url,map); List&lt;Real&gt; list &#x3D; new ArrayList&lt;&gt;(); List&lt;Real&gt; nullList &#x3D; new ArrayList&lt;&gt;(); List&lt;Path&gt; pathList; if (json !&#x3D; null || !json.equals(&quot;&quot;)) &#123; JSONObject jo &#x3D; JSONObject.parseObject(json); JSONObject result &#x3D; jo.getJSONObject(&quot;result&quot;); JSONArray items &#x3D; result.getJSONArray(&quot;items&quot;); JSONArray detailArray &#x3D; (JSONArray) items.get(0); JSONArray areaArray &#x3D; (JSONArray) items.get(1); Real real; Path path; for (int i &#x3D; 0; i &lt; detailArray.size(); i++) &#123; pathList &#x3D; new ArrayList&lt;&gt;(); real &#x3D; new Real(); JSONArray jsonArray &#x3D; detailArray.getJSONArray(i); JSONObject detailObject &#x3D; jsonArray.getJSONObject(0); &#x2F;&#x2F;通过JSONObject.parseObject把得到的json数据转换为实体类对象 Details details &#x3D; JSONObject.parseObject(detailObject.toJSONString(), Details.class); JSONArray jsonArray1 &#x3D; areaArray.getJSONArray(i); List&lt;String&gt; stringList &#x3D; JSONObject.parseObject(jsonArray1.toJSONString(), List.class); real.setArea(stringList.get(0)); real.setAccessTime(details.getDetail().getPaths().get(0).get(0)+&quot;&quot;); if(details.getDetail().getPaths().get(0).get(0).toString().length()&lt;10) &#123; real.setAccessTimeStr(details.getDetail().getPaths().get(0).get(0).toString()); &#125;else &#123; real.setAccessTimeStr(details.getDetail().getPaths().get(0).get(0).toString().substring(0, 10)); &#125; real.setBrowser(details.getDetail().getBrowser()); real.setAccessPage(details.getDetail().getAccessPage()); real.setBrowserType(details.getDetail().getBrowserType()); real.setColor(details.getDetail().getColor()); real.setCookie(details.getDetail().getCookie()); real.setEndPage(details.getDetail().getEndPage()); real.setFromType(details.getDetail().getFromType().getFromType()); real.setIsp(details.getDetail().getIsp()); real.setJava(details.getDetail().getJava()); real.setLastVisitTime(details.getDetail().getLastVisitTime()); real.setSource(stringList.get(1)); if(stringList.get(2).contains(&quot;--&quot;)||stringList.get(2).contains(&quot;未知&quot;))&#123; real.setVisitTime(&quot;未知&quot;); &#125;else&#123; real.setVisitTime(TrendAnalyzeUtil.secToTime(Integer.parseInt(stringList.get(2)))); &#125; for (int j &#x3D; 0; j &lt; details.getDetail().getPaths().size(); j++) &#123; path &#x3D; new Path(); path.setTime(details.getDetail().getPaths().get(j).get(0).toString()); path.setCount(details.getDetail().getPaths().get(j).get(1).toString()); path.setUrl(details.getDetail().getPaths().get(j).get(2).toString()); pathList.add(path); &#125; real.setPath(pathList); real.setVisitType(details.getDetail().getVisitorType()); real.setOs(details.getDetail().getOs()); real.setLastPage(details.getDetail().getEndPage()); real.setResolution(details.getDetail().getResolution()); real.setOsType(details.getDetail().getDeviceType()); real.setVisitCount(details.getDetail().getVisitorFrequency()); list.add(real); &#125; return list; &#125; return nullList; &#125;&#125;","categories":[{"name":"Util","slug":"Util","permalink":"http://example.com/categories/Util/"}],"tags":[{"name":"Util","slug":"Util","permalink":"http://example.com/tags/Util/"}]},{"title":"Java 常用注解","slug":"Java/001_常用注解","date":"2020-09-20T16:00:00.000Z","updated":"2021-03-11T06:37:39.691Z","comments":true,"path":"2020/09/21/Java/001_常用注解/","link":"","permalink":"http://example.com/2020/09/21/Java/001_%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"Spring的常用注解@Component作用： 调用无参构造创建一个bean对象，并把对象存入spring的IOC容器，交由spring容器进行管理。相当于在xml中配置一个bean。 属性： value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。 @Controller作用： 作用上与@Component。一般用于表现层的注解。 属性： value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。 @Service作用： 作用上与@Component。一般用于业务层的注解。 属性： value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。 @Repository作用： 作用上与@Component。一般用于持久层的注解。 属性： value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名。首字母小写。 @Bean作用： 用于把当前方法的返回值作为bean对象存入spring的ioc容器中 属性： name：用于指定bean的id。当不写时，默认值是当前方法的名称。注意：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象，查找的方式和Autowired注解的作用是一样的。 案例： 1234567891011121314151617&#x2F;** * 获取DataSource对象 * @return *&#x2F;@Bean(value &#x3D; &quot;dataSource&quot;)public DataSource getDataSource() &#123; try &#123; ComboPooledDataSource dataSource &#x3D; new ComboPooledDataSource(); dataSource.setDriverClass(this.driver); dataSource.setJdbcUrl(this.url); dataSource.setUser(this.username); dataSource.setPassword(this.password); return dataSource; &#125;catch (Exception exception) &#123; throw new RuntimeException(exception); &#125;&#125; @Autowired作用： @Autowire和@Resource都是Spring支持的注解形式动态装配bean的方式。Autowire默认按照类型(byType)装配，如果想要按照名称(byName)装配，需结合@Qualifier注解使用。 属性： required：@Autowire注解默认情况下要求依赖对象必须存在。如果不存在，则在注入的时候会抛出异常。如果允许依赖对象为null，需设置required属性为false。 案例： 123@Autowire @Qualifier(&quot;userService&quot;) private UserService userService; @Qualifier作用： 在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。它在给字段注入时不能独立使用，必须和 @Autowire一起使用；但是给方法参数注入时，可以独立使用。 属性： value：用于指定要注入的bean的id，其中，该属性可以省略不写。 案例： 1234@Autowire@Qualifier(value&#x3D;&quot;userService&quot;) &#x2F;&#x2F;@Qualifier(&quot;userService&quot;) &#x2F;&#x2F;value属性可以省略不写private UserService userService; @Resource作用： @Autowire和@Resource都是Spring支持的注解形式动态装配bean的方式。@Resource默认按照名称(byName)装配，名称可以通过name属性指定。如果没有指定name，则注解在字段上时，默认取（name=字段名称）装配。如果注解在setter方法上时，默认取（name=属性名称）装配。 属性： name：用于指定要注入的bean的id type：用于指定要注入的bean的type 装配顺序 1.如果同时指定name和type属性，则找到唯一匹配的bean装配，未找到则抛异常； 2.如果指定name属性，则按照名称(byName)装配，未找到则抛异常； 3.如果指定type属性，则按照类型(byType)装配，未找到或者找到多个则抛异常； 4.既未指定name属性，又未指定type属性，则按照名称(byName)装配；如果未找到，则按照类型(byType)装配。 案例： 1234@Resource(name&#x3D;&quot;userService&quot;)&#x2F;&#x2F;@Resource(type&#x3D;&quot;userService&quot;)&#x2F;&#x2F;@Resource(name&#x3D;&quot;userService&quot;, type&#x3D;&quot;UserService&quot;)private UserService userService; @Value作用： 通过@Value可以将外部的值动态注入到Bean中，可以为基本类型数据和String类型数据的变量注入数据 案例： 12345&#x2F;&#x2F;基本类型数据和String类型数据的变量注入数据@Value(&quot;tom&quot;) private String name;@Value(&quot;18&quot;) private Integer age; 从properties配置文件中获取数据并设置到成员变量中代码： // jdbcConfig.properties配置文件定义如下 jdbc.driver \\= com.mysql.jdbc.Driver jdbc.url \\= jdbc:mysql://localhost:3306/eesy jdbc.username \\= root jdbc.password \\= root // 获取数据如下 @Value(&quot;$&#123;jdbc.driver&#125;&quot;) private String driver; @Value(&quot;$&#123;jdbc.url&#125;&quot;) private String url; @Value(&quot;$&#123;jdbc.username&#125;&quot;) private String username; @Value(&quot;$&#123;jdbc.password&#125;&quot;) private String password; 改变bean作用范围的注解@Scope作用： 指定bean的作用范围。 属性： value： 1）singleton：单例 2）prototype：多例 3）request： 4）session： 5）globalsession： 案例： 123@Autowire@Scope(value&#x3D;&quot;prototype&quot;)private UserService userService;","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"上传图片","slug":"Util/001_上传文件到本地","date":"2020-09-20T16:00:00.000Z","updated":"2021-03-22T09:49:32.273Z","comments":true,"path":"2020/09/21/Util/001_上传文件到本地/","link":"","permalink":"http://example.com/2020/09/21/Util/001_%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0/","excerpt":"","text":"上传文件yml文件配置上传路径12upload: url: D:&#x2F;upload 代码12345678910111213141516171819202122232425262728293031&#x2F;&#x2F;获取上传路径@Value(&quot;$&#123;upload.url&#125;&quot;)private String uploadUrl;&#x2F;&#x2F;功能实现@PostMapping(&quot;&#x2F;weUploadFile&quot;)@ApiOperation(&quot;上传文件&quot;)public String upload(MultipartFile attach)&#123;&#x2F;&#x2F;attach要与前端传的name保持一致 &#x2F;&#x2F;获取真实路径 String realPath &#x3D; uploadUrl; if(realPath!&#x3D;null)&#123; File folder &#x3D; new File(realPath); if (folder.exists()&#x3D;&#x3D;false)&#123; folder.mkdirs(); &#125; String original &#x3D; attach.getOriginalFilename(); &#x2F;&#x2F;下方代码对文件名重命名 &#x2F;&#x2F;int index &#x3D; original.lastIndexOf(&quot;.&quot;); &#x2F;&#x2F;String suffix &#x3D; original.substring(index); &#x2F;&#x2F;String newFileName &#x3D; UUID.randomUUID().toString()+suffix; File file &#x3D; new File(folder,original); try &#123; attach.transferTo(file); &#125; catch (IOException e) &#123; return &quot;fail&quot;; &#125; return &quot;success&quot;+&quot;&quot;+uploadUrl+&quot;&#x2F;&quot;+original; &#125;else &#123; return &quot;fail&quot;; &#125; &#125;","categories":[{"name":"Util","slug":"Util","permalink":"http://example.com/categories/Util/"}],"tags":[{"name":"Util","slug":"Util","permalink":"http://example.com/tags/Util/"}]},{"title":"博客部署","slug":"Blog/部署博客","date":"2020-09-06T16:00:00.000Z","updated":"2021-06-09T09:41:43.612Z","comments":true,"path":"2020/09/07/Blog/部署博客/","link":"","permalink":"http://example.com/2020/09/07/Blog/%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Quick StartCreate a new posthexo cleanhexo ghexo d1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"BLOG","slug":"BLOG","permalink":"http://example.com/categories/BLOG/"}],"tags":[{"name":"BLOG","slug":"BLOG","permalink":"http://example.com/tags/BLOG/"}]},{"title":"遍历Map集合的几种方式","slug":"Base/001_遍历map集合","date":"2020-05-08T16:00:00.000Z","updated":"2021-08-25T07:12:30.272Z","comments":true,"path":"2020/05/09/Base/001_遍历map集合/","link":"","permalink":"http://example.com/2020/05/09/Base/001_%E9%81%8D%E5%8E%86map%E9%9B%86%E5%90%88/","excerpt":"","text":"Java中遍历Map的几种常见方式这里先定义个变量map123456public static Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;()&#123; &#123; put(&quot;姓名&quot;,&quot;name&quot;); put(&quot;年龄&quot;,&quot;age&quot;); &#125; &#125;; 第一种（通过遍历key去取value，效率较低）123for (Object o:map.keySet())&#123; System.out.println(o+&quot;---&quot;+map.get(o)); &#125; 第二种（for-each循环中使用entries来遍历这是最常见的并且在大多数情况下也是最可取的遍历方式，取键值都可以。）123for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123; System.out.println(&quot;key:&quot;+ entry.getKey() + &quot;\\tvalue:&quot; + entry.getValue()); &#125; 第三种（遍历通过迭代器（Iterator）来进行遍历，代码比较冗余。）12345Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator &#x3D; map.entrySet().iterator(); while (iterator.hasNext())&#123; Map.Entry&lt;String, String&gt; next &#x3D; iterator.next(); System.out.println(&quot;key:&quot;+next.getKey()+&quot;\\tvalue:&quot;+next.getValue()); &#125; 第四种（直接遍历值，在foreach循环中遍历key或values。代码简洁，并且效率要好。）下面代码通过KeySet获得key及value123for (Object o:map.keySet())&#123; System.out.println(&quot;key:&quot;+o+&quot;---value:&quot;+map.get(o)); &#125; 下面代码通过value获得value123for (Object o : map.values()) &#123; System.out.println(&quot;value:&quot;+o); &#125; 第五种（java8遍历的写法，效率更高。）1map.forEach((k,v)-&gt; System.out.println(&quot;key:&quot;+k+&quot;value:&quot;+v));","categories":[{"name":"Base","slug":"Base","permalink":"http://example.com/categories/Base/"}],"tags":[{"name":"Base","slug":"Base","permalink":"http://example.com/tags/Base/"}]},{"title":"Oracle在项目中用到的语句","slug":"Oracle/001_oracle语句","date":"2020-05-08T16:00:00.000Z","updated":"2021-07-15T08:51:32.892Z","comments":true,"path":"2020/05/09/Oracle/001_oracle语句/","link":"","permalink":"http://example.com/2020/05/09/Oracle/001_oracle%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"记录项目中Oracle常用的语句拼接条件带时间1update ZC_STORE_STOCK SET CREATE_TIME &#x3D; to_date(&#39;2021-05-09 00:00:00&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;) （项目中不知道谁一直输入错误的数据库密码 导致账户被锁，这个解锁user用户）1alter user ecidi_wh account unlock; 求一个表中某个字段的总和(总和为空的话默认为0)1select COALESCE(SUM(PIPE_LENGTH),0) FROM &quot;ZC_FACILITY&quot;","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/tags/Oracle/"}]}],"categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/categories/Oracle/"},{"name":"Util","slug":"Util","permalink":"http://example.com/categories/Util/"},{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"娱乐","slug":"娱乐","permalink":"http://example.com/categories/%E5%A8%B1%E4%B9%90/"},{"name":"Feign","slug":"Feign","permalink":"http://example.com/categories/Feign/"},{"name":"BLOG","slug":"BLOG","permalink":"http://example.com/categories/BLOG/"},{"name":"Base","slug":"Base","permalink":"http://example.com/categories/Base/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/tags/Oracle/"},{"name":"Util","slug":"Util","permalink":"http://example.com/tags/Util/"},{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"娱乐","slug":"娱乐","permalink":"http://example.com/tags/%E5%A8%B1%E4%B9%90/"},{"name":"Feign","slug":"Feign","permalink":"http://example.com/tags/Feign/"},{"name":"BLOG","slug":"BLOG","permalink":"http://example.com/tags/BLOG/"},{"name":"Base","slug":"Base","permalink":"http://example.com/tags/Base/"}]}